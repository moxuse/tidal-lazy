setcps (124/120)

do
  let pat ="{1 0 1 1 1 0 [0 0] 0 ~ ~ ~ 1 0 0 0 0}%4"
  let pat2 ="{1 0 1 0 1 [0 1 1] ~ 1 0 0 ~ 0 }%6"
  let pat3 ="{1 0 1 1 0 ~ ~ ~ 0 1 1 0 0}%8"
  let x = gain pat
  let y = gain (inverse <$> pat)
  let z = gain pat2
  let u = gain pat3
  let v = gain (inverse <$> pat3)
  d1
    $ iter (wchoose [(1,8)])
    $ every 6 (rot (wchoose [(1,3)]))
    $ every 4 (within (0,2.65) (|+ binshf 0.5)) .(rev)
    $ within (0.25, 0.85) (msvoB 0)
    $ stack [
      x # s "mhh:0" |+ slowSpeedR 4 |+ shape (range 0.3 0.0 sine)
      , y # s "mst:8?" |+ slowSpeedR 3 |+ shape (range 0.4 0.0 sine)
      , y # s "mbd2:2?" |* gain (slow 3(range 0.24 1 saw))
      -- , (0.25~>) $ degradeBy 0.5 $ z # s "<[dig1?, dig2?] ~ dig2?>"  
      -- , (0.25~>) $ degradeBy 0.2 $ u # s "<[dig0? dig1?] dig0 ~>"
      -- , degradeBy 0.5 $ z # s "<dig4 dig3 dig4? dig5?>"
      -- , degradeBy 0.94 $ fast 1.5 $ s "ml4:12" |+ slowSpeedR 5
      , degradeBy 0.98 v # s "mwb:21?" |+ slowSpeedR 3 |+ gain 0.9 |+ hpf 1200 |+ coarse 12 |+ wah 0.05
    ] 
    |+ mGain
    |+ slowPanR 3

hush



u1 
-- $ iter 3 
$ slow 8
$ thing "salmon2*10 stone2*10 crab*10"
|+ y 1.5
|+ rigid 1
|+ duration 3
|+ y 0.2
|+ x (slow 3 (range (-0.8) (-0.4) sine))
|+ z (-0.8)
|+ vscale 0.5

uhush

setcps (142/120/2)

do
  let pat = "<0 1 ~ 1> 1 0 ~ ~ 0 0 <~ 0 ~ 1> 1 1 ~ 0 ~ ~ 0 1"
  let pat2 = "{~ 1 0 0 <1 ~> [~ 1] <1 0 0> <0 1>}%4"
  let x =  gain pat
  let y =  gain pat2
  let z =  gain (inverse <$> pat)
  let w =  gain (inverse <$> pat2)
  d1
    $ every 4 (msvoB 0)
    $ sometimesBy 0.3 (within (0.5,1) (|+ binshfR) . (|+ dist 0.076) .( |+ accelerate "{0 0.0.4 0.04 -1 1 -0.3 0 0.07}%3"))
    $ every 6 (within (0.8,1) (msvoA 0) . (|+ squiz "0 <2 0 1 0>") . (|+ wah 0.03))
    $ sometimesBy 0.5 (within (0, 0.8) ((mask "f <f t> t <t f t>") . (|+ mfDel) .(|* accelerate (range 1.25 0.2 saw))))
    $ sometimesBy 0.3 (within (0.5, 0.75) ((ply 2) . (slow 2)))
    $ unison "mbd" (s "zap:24?" |+ mGain)
    $ stack [
      x # s "mhh:0" |+ up "{0 -7 5 0 1}%5"
      , z # s "mbd:2" |* speed "2 1 0.85 1.75 1.5" |+ cutoff (slow 2 (range 350 1200 $ sine))
      , degradeBy 0.5 $ w # s "<mnz:12 mst:9>" |+ slowSpeedR 3  |+ sus "<0.3 1 0.1 0.6 0.8>" |+ slowSpeedR 3
      , y # s "[msn2:1, zap:18?]/3" |+ sus "{0.3 0.4 0.2 1 0.17 0.1}" |+ slowSpeedR 2 
      , degradeBy 0.85 $ w # s "[mst:1, ml4:9?]/2" |+ slowSpeedR 2 |+ n "<12 9>" 
    ]
    -- |+ mDefault
    |+ mGain |+ slowPanS 3
    |+ room "{0 0.02 0.04 0.15 0.1 0.02}%5"


setcps (146/120/2.5)

d2 $ s "~ mst:4 ~ ~" |+ mGain

d3 
  $ mask "t f <t f>" $ s "supersaw(<9 5 3>,16)" 
  -- $ mask "t f <f f t>" $ s "ml2:14(9,16)" |+ sus (slow 3 $ (range 0.2 0.05) sine)
  |+ up (scale "dorian" "{0 1 4 5 6 <10 14> 12}%8" + 5 + "<0 -12>" ) 
  |+ binscr 0.3
  |+ wah 0.03
  |+ squiz 1.15
  |+ sus (slow 3 $ (range 0.1 0.5) sine)
  |+ gain 1.1 
  |+ cutoff (slow 5 (range 650 4200 $ sine))
  |+ room 0.1

do
  d1 
    $ spaceOut [0.01,0.02..0.35] 
    $ s "msn2:10? mhh:0 mbd:2 ~" 
    |+ room 0.05
    |+ mGain 
    |+ delay 0.135
    |+ cps "<1.35  0.45>"
  d3 silence

d4 $ slow 64 $ s "sync"

d3 
  $ mask "t t f f f" $ s "ml2:14(5,16)"
  |+ up (scale "dorian" "{1 3 0 -2 5 <8 10> 6}%3" + 5 + "<24>" ) 
  |+ wah 0.03
  |+ squiz 1.25
  |+ sus (slow 3 $ (range 1.0 0.75) sine)
  |+ mGain 
  |+ room 0.1

d1 silence >> d3 silence


