setcps "1"

do
  let pat = "1 0 [1 [0 [1 0]]]/3 0 1/2  1 1 0 1 [1 0 1] 0*3 1 0 [0 1 0] 0 0"
  -- let pat = (slow "<4 5 4 1.75>" "[0 [1 0 [1 0]]]/4 1/2 [0 1/2]/2 0 [1 0? 1]*2 1/3 [[0 1]/3 0] 0 1 0/2 1 [1 0? 0]/2 0 1 1")
  -- let pat = (slow "<5 4 3>" "0 1*2 [1/2 [0? 1]] 1 1/2 [1 [0 [1 0]?]?]/2 1? [0 [1 0 1]?]/3 1 1 0/2 [1 1 0] 1 0 0 1")
  d1
    $ stack [
      gain (slow 8 $ inverse <$> pat) |+| s "mst",
      gain (slow 8 $ inverse <$> pat) |+| s "mbd:8"
    ]
  
  
  
  
do
  x <- lazy' 2 $ inst $ (hh "[mst mhh2]/2") . (sn "[msn3 [~ [mwb? msn2:22?]/4]]/2") . (bd "[mbd2 mb2?]/2")
  d1
    $ degradeBy 0.8
    $ msvoA 0.125
    $ sometimes (|+| brick "{2 0 0 2 0 0 1}")
    $ x
    # mGain
    |+| accelerate "{-0.05 0 2 0.04 [0 -0.05] -0.08 0.04}%6"
    |*| speed "{-1 0.5 1 1 1 -1 2}%3"
    |+| crush "[48 42 32 32 128 8 32]"
    |+| slowPanS 3
    |+| mNudge
    |+| up "<2 -1 0>"
    |-| up "0 4 5 6 5"
    |+| n "<30 5>"



hush



let ly_1 = "[0, 2, 4]"
    ly_2 = "[2, 4, 6]"
    ly_3 = "[4, 6, 7]"
    ly_4 = "[6, 7, 9]"
    ly_5 = "[7, 9, 11]"
    ly_6 = "[9, 11, 0]"

  d2  $ slow 2 $ up ly_3 |+| s "ml4" |+| n 19 |+| room 0.8 |-| up "1" |+| mGain |+| shape 0.2 |+| sustain 2 |+| mNudge |*| speed 1.85


d2 silence

hush

 :t  ur





