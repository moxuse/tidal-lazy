setcps (138/120)

d2 $ slow 64 $ s "sync" |+ mGain

u1 
$ slow 2
$ thing "trash7*10 cactus1*8 banana*10"
|+ y 1.5
|+ rigid 1
|+ duration 3
|+ y 0.2
|+ x (slow 3 (range (-0.8) (-0.7) sine))
|+ z (-0.9)
|+ vscale 0.5

do
  let pat ="{0 [0 0] 0 1 [0 0 1] 1 1 0 ~ ~ ~ ~}%9"
  let pat2 ="{1 [~ 0] 1 1 0 0 ~ 1 0}%6"
  let x = gain pat
  let y = gain (inverse <$> pat)
  let z = gain pat2
  d1
    $ every 2 (iter (wchoose [(3,7)]))
    $ whenmod 4 3 (rot (wchoose [(1,3)]))
    $ every 4 (within (0,0.25) (|+ binshf 0.3)) . (rev)
    -- $ whenmod 4 2 (within (0.25,0.9) (|+ mDefault))
    $ within (0.5, 0.8) (msvoB 0)
    $ stack [
      x # s "mhh2:2" |+ slowSpeedR 4 |+ shape (range 0.3 0.0 sine)
      , y # s "msn2:6?" |+ slowSpeedR 6 |+ shape (range 0.4 0.0 sine)
      , y # s "[mbd:7 mbd:8]/2" |* gain (slow 0.5 (range 0.04 1 saw)) |+ slowSpeedR 2
      , (0.075~>) $ degradeBy 0.3 $ s "<~ [~ dig2 ~ ~, ~ dig4]*2 ~>"  
      , (0.125~>) $ degradeBy 0.4 $ y # s "<[dig0/2, dig5?]*2 ~>"
      , degradeBy 0.5 $ s "<[~ dig1/2, dig3 ~ dig0?]*3 ~>"
      , slow 2 $ s "mcp:1" |+ conv 0.3 |+ slowSpeedR 5
      , degradeBy 0.82 y # s "ml4:18?" |+ slowSpeedR 3 |+ gain 0.1 |+ hpf 200 |+ coarse 8 |+ wah 0.1
    ] 
    |+ mGain
    |+ slowPanR 3



uhush

hush
